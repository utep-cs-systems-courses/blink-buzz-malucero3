#include <msp430.h>
#include "stateMachines.h"
#include "led.h"
#include "buzzer.h"
#include "switches.h"

static char led_state = 0;
static char change = 0;
// as button is pressed, we increment to 3 starting from 0
void toggle_green(
){
  
  green_on = change;
  led_changed = 1;
  led_update();
  buzzer_set_period(0);
}

static int buzzerSound = 0;
void imperialSound(){
  int soundArr[12] = {704,0,704,0,704,0,1674,0,1184,0,704,0};
  buzzer_set_period(soundArr[buzzerSound]);
  led_changed = 1;
  led_update();
  buzzerSound ++;
  if (buzzerSound >= 11){
    buzzerSound = 0;
  }
}
static char blink_count = 0;
static char buzzCount = 0;
void imp()
{
  if(++buzzCount == 65){
    imperialSound();
    buzzCount = 0;
  }
}

/*
Dimming LED pattern functions:
LCD changes intensity based on how many times it's on per second

 */
static int blinkLimit = 0; //state var representing reciprocal of duty cycle
void blinkUpdate()        // turn the light on/off based on the frequency selected
{

  /*control the green light based on blinkLimit. if blinkLimit is n, then the first n-1 times that
    is called, it will turn off the green light and the n amount of times that is called,
    it will turn on the green LED */
  
  static int blinkCount = 0; //state  var representing blink state
  if (blinkCount++ >= blinkLimit){
    blinkCount = 0;
    greenControl(1);
  } else
    greenControl(0);
}

void oncePerSecond() //repeatedly start bright and gradually lower duty cycle one step/sec
{
  static unsigned short period_inc = 1000;

  if(++blinkLimit >= 8){  //doesnt let the duty cycle go below 1/7
    blinkLimit = 0;
    if(red_on)
      curr_period = 0; //reset buzzer period
    change_red();
  }
  curr_period += period_inc;
  buzzer_set_period(curr_period);
}

void secondUpdate()  //change the frequency at whih the LED is on
{
  // counts 1 sec and calls oncePerSecond to increase the blink count by 1 (to lower intenisty)
  static int secondCount = 0;  //state variable representing repeating time 0..1s
  if(secondCount++ >= 250){ //once each sec
    secondCount = 0;
    oncePerSecond();
  }
}

//The higher n is, the more amount of times the green LED will be off which dims 
void dimming_state_machines()
{
  buzzer_set_period(100);

  blinkUpdate();
  secondUpdate();

}

// Turn leds off and stop buzzing (low freq)

void off_leds_buzzer()
{
  led_off();
  buzzer_set_period(100);
}

